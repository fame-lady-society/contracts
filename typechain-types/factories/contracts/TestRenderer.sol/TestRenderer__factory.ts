/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TestRenderer,
  TestRendererInterface,
} from "../../../contracts/TestRenderer.sol/TestRenderer";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "emitMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseUri",
        type: "string",
      },
    ],
    name: "setBaseUri",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_emitableMetadata",
        type: "address",
      },
    ],
    name: "setEmittableMetadata",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610af8806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806374c89aa414610051578063a0bcfc7f1461006d578063c87b56dd14610089578063d0bd1000146100b9575b600080fd5b61006b6004803603810190610066919061047c565b6100d5565b005b6100876004803603810190610082919061050e565b610119565b005b6100a3600480360381019061009e9190610591565b61012f565b6040516100b0919061064e565b60405180910390f35b6100d360048036038101906100ce9190610591565b610163565b005b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b81816000918261012a9291906108b6565b505050565b6060600061013c836101f3565b60405160200161014d929190610a45565b6040516020818303038152906040529050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633190b9ea826040518263ffffffff1660e01b81526004016101be9190610a78565b600060405180830381600087803b1580156101d857600080fd5b505af11580156101ec573d6000803e3d6000fd5b5050505050565b606060006001610202846102c1565b01905060008167ffffffffffffffff8111156102215761022061067b565b5b6040519080825280601f01601f1916602001820160405280156102535781602001600182028036833780820191505090505b509050600082602001820190505b6001156102b6578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816102aa576102a9610a93565b5b04945060008503610261575b819350505050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000831061031f577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161031557610314610a93565b5b0492506040810190505b6d04ee2d6d415b85acef8100000000831061035c576d04ee2d6d415b85acef8100000000838161035257610351610a93565b5b0492506020810190505b662386f26fc10000831061038b57662386f26fc10000838161038157610380610a93565b5b0492506010810190505b6305f5e10083106103b4576305f5e10083816103aa576103a9610a93565b5b0492506008810190505b61271083106103d95761271083816103cf576103ce610a93565b5b0492506004810190505b606483106103fc57606483816103f2576103f1610a93565b5b0492506002810190505b600a831061040b576001810190505b80915050919050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104498261041e565b9050919050565b6104598161043e565b811461046457600080fd5b50565b60008135905061047681610450565b92915050565b60006020828403121561049257610491610414565b5b60006104a084828501610467565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126104ce576104cd6104a9565b5b8235905067ffffffffffffffff8111156104eb576104ea6104ae565b5b602083019150836001820283011115610507576105066104b3565b5b9250929050565b6000806020838503121561052557610524610414565b5b600083013567ffffffffffffffff81111561054357610542610419565b5b61054f858286016104b8565b92509250509250929050565b6000819050919050565b61056e8161055b565b811461057957600080fd5b50565b60008135905061058b81610565565b92915050565b6000602082840312156105a7576105a6610414565b5b60006105b58482850161057c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105f85780820151818401526020810190506105dd565b60008484015250505050565b6000601f19601f8301169050919050565b6000610620826105be565b61062a81856105c9565b935061063a8185602086016105da565b61064381610604565b840191505092915050565b600060208201905081810360008301526106688184610615565b905092915050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106f157607f821691505b602082108103610704576107036106aa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261076c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261072f565b610776868361072f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006107b36107ae6107a98461055b565b61078e565b61055b565b9050919050565b6000819050919050565b6107cd83610798565b6107e16107d9826107ba565b84845461073c565b825550505050565b600090565b6107f66107e9565b6108018184846107c4565b505050565b5b818110156108255761081a6000826107ee565b600181019050610807565b5050565b601f82111561086a5761083b8161070a565b6108448461071f565b81016020851015610853578190505b61086761085f8561071f565b830182610806565b50505b505050565b600082821c905092915050565b600061088d6000198460080261086f565b1980831691505092915050565b60006108a6838361087c565b9150826002028217905092915050565b6108c08383610670565b67ffffffffffffffff8111156108d9576108d861067b565b5b6108e382546106d9565b6108ee828285610829565b6000601f83116001811461091d576000841561090b578287013590505b610915858261089a565b86555061097d565b601f19841661092b8661070a565b60005b828110156109535784890135825560018201915060208501945060208101905061092e565b86831015610970578489013561096c601f89168261087c565b8355505b6001600288020188555050505b50505050505050565b600081905092915050565b6000815461099e816106d9565b6109a88186610986565b945060018216600081146109c357600181146109d857610a0b565b60ff1983168652811515820286019350610a0b565b6109e18561070a565b60005b83811015610a03578154818901526001820191506020810190506109e4565b838801955050505b50505092915050565b6000610a1f826105be565b610a298185610986565b9350610a398185602086016105da565b80840191505092915050565b6000610a518285610991565b9150610a5d8284610a14565b91508190509392505050565b610a728161055b565b82525050565b6000602082019050610a8d6000830184610a69565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220ca9967486a7180dba1960b6ab87f71ab96bbf866261380fd4eca58165f038cbb64736f6c63430008120033";

type TestRendererConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRendererConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRenderer__factory extends ContractFactory {
  constructor(...args: TestRendererConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestRenderer & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestRenderer__factory {
    return super.connect(runner) as TestRenderer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRendererInterface {
    return new Interface(_abi) as TestRendererInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TestRenderer {
    return new Contract(address, _abi, runner) as unknown as TestRenderer;
  }
}
